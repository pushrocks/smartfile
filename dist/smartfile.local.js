"use strict";
require("typings-global");
var plugins = require("./smartfile.plugins");
var SmartfileGet = require("./smartfile.get");
var SmartfileInterpreter = require("./smartfile.interpreter");
exports.toFS = function (options, cb) {
    if (cb === void 0) { cb = undefined; }
};
/**
 *
 * @param filePathArg
 * @returns {*}
 */
exports.toGulpStreamSync = function (filePathArg) {
    var stream = plugins.gulp.src(filePathArg);
    return stream;
};
exports.toGulpDestSync = function (folderPathArg) {
    return plugins.gulp.dest(folderPathArg);
};
/**
 *
 * @param filePathArg
 * @param fileTypeArg
 * @returns {any}
 */
exports.toObjectSync = function (filePathArg, fileTypeArg) {
    var fileString = plugins.fs.readFileSync(filePathArg, 'utf8');
    var fileType;
    fileTypeArg ? fileType = fileTypeArg : fileType = SmartfileGet.filetype(filePathArg);
    return SmartfileInterpreter(fileString, fileType);
};
/**
 * reads a file content to a String
 * @param filePath
 * @returns {string|Buffer|any}
 */
exports.toStringSync = function (filePath) {
    var fileString;
    fileString = plugins.fs.readFileSync(filePath, "utf8");
    return fileString;
};
/**
 *
 * @param filePathArg
 * @param options
 * @returns {number}
 */
exports.toVinylSync = function (filePathArg, options) {
    if (options === void 0) { options = {}; }
    return plugins.vinylFile.readSync(filePathArg, options);
};
/**
 * lets you reload files hot.
 * @param path
 * @returns {any}
 */
exports.requireReload = function (path) {
    return plugins.requireReload(path);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtYXJ0ZmlsZS5sb2NhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTyxnQkFBZ0IsQ0FBQyxDQUFBO0FBRXhCLElBQU8sT0FBTyxXQUFXLHFCQUFxQixDQUFDLENBQUM7QUFDaEQsSUFBTyxZQUFZLFdBQVcsaUJBQWlCLENBQUMsQ0FBQztBQUNqRCxJQUFPLG9CQUFvQixXQUFXLHlCQUF5QixDQUFDLENBQUM7QUFDdEQsWUFBSSxHQUFHLFVBQVMsT0FBbUMsRUFBRSxFQUFZO0lBQVosa0JBQVksR0FBWixjQUFZO0FBRTVFLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDUSx3QkFBZ0IsR0FBRyxVQUFTLFdBQWtCO0lBQ3JELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRVMsc0JBQWMsR0FBRyxVQUFTLGFBQW9CO0lBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNRLG9CQUFZLEdBQUcsVUFBUyxXQUFXLEVBQUMsV0FBWTtJQUN2RCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxRQUFRLENBQUM7SUFDYixXQUFXLEdBQUcsUUFBUSxHQUFHLFdBQVcsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRixNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDUSxvQkFBWSxHQUFHLFVBQVMsUUFBUTtJQUN2QyxJQUFJLFVBQVUsQ0FBQztJQUNmLFVBQVUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNRLG1CQUFXLEdBQUcsVUFBUyxXQUFXLEVBQUMsT0FBWTtJQUFaLHVCQUFZLEdBQVosWUFBWTtJQUN0RCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNELENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDUSxxQkFBYSxHQUFHLFVBQVMsSUFBVztJQUMzQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUMiLCJmaWxlIjoic21hcnRmaWxlLmxvY2FsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwidHlwaW5ncy1nbG9iYWxcIjtcclxuXHJcbmltcG9ydCBwbHVnaW5zID0gcmVxdWlyZShcIi4vc21hcnRmaWxlLnBsdWdpbnNcIik7XHJcbmltcG9ydCBTbWFydGZpbGVHZXQgPSByZXF1aXJlKFwiLi9zbWFydGZpbGUuZ2V0XCIpO1xyXG5pbXBvcnQgU21hcnRmaWxlSW50ZXJwcmV0ZXIgPSByZXF1aXJlKFwiLi9zbWFydGZpbGUuaW50ZXJwcmV0ZXJcIik7XHJcbmV4cG9ydCBsZXQgdG9GUyA9IGZ1bmN0aW9uKG9wdGlvbnM6e2Zyb206c3RyaW5nLHRvUGF0aDpzdHJpbmd9LCBjYj11bmRlZmluZWQpe1xyXG4gICAgXHJcbn07XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGZpbGVQYXRoQXJnXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuZXhwb3J0IGxldCB0b0d1bHBTdHJlYW1TeW5jID0gZnVuY3Rpb24oZmlsZVBhdGhBcmc6c3RyaW5nKXtcclxuICAgIGxldCBzdHJlYW0gPSBwbHVnaW5zLmd1bHAuc3JjKGZpbGVQYXRoQXJnKTtcclxuICAgIHJldHVybiBzdHJlYW07XHJcbn07XHJcblxyXG5leHBvcnQgbGV0IHRvR3VscERlc3RTeW5jID0gZnVuY3Rpb24oZm9sZGVyUGF0aEFyZzpzdHJpbmcpe1xyXG4gICAgcmV0dXJuIHBsdWdpbnMuZ3VscC5kZXN0KGZvbGRlclBhdGhBcmcpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBmaWxlUGF0aEFyZ1xyXG4gKiBAcGFyYW0gZmlsZVR5cGVBcmdcclxuICogQHJldHVybnMge2FueX1cclxuICovXHJcbmV4cG9ydCBsZXQgdG9PYmplY3RTeW5jID0gZnVuY3Rpb24oZmlsZVBhdGhBcmcsZmlsZVR5cGVBcmc/KSB7XHJcbiAgICBsZXQgZmlsZVN0cmluZyA9IHBsdWdpbnMuZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoQXJnLCAndXRmOCcpO1xyXG4gICAgbGV0IGZpbGVUeXBlO1xyXG4gICAgZmlsZVR5cGVBcmcgPyBmaWxlVHlwZSA9IGZpbGVUeXBlQXJnIDogZmlsZVR5cGUgPSBTbWFydGZpbGVHZXQuZmlsZXR5cGUoZmlsZVBhdGhBcmcpO1xyXG4gICAgcmV0dXJuIFNtYXJ0ZmlsZUludGVycHJldGVyKGZpbGVTdHJpbmcsZmlsZVR5cGUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlYWRzIGEgZmlsZSBjb250ZW50IHRvIGEgU3RyaW5nXHJcbiAqIEBwYXJhbSBmaWxlUGF0aFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfEJ1ZmZlcnxhbnl9XHJcbiAqL1xyXG5leHBvcnQgbGV0IHRvU3RyaW5nU3luYyA9IGZ1bmN0aW9uKGZpbGVQYXRoKSB7XHJcbiAgICBsZXQgZmlsZVN0cmluZztcclxuICAgIGZpbGVTdHJpbmcgPSBwbHVnaW5zLmZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgXCJ1dGY4XCIpO1xyXG4gICAgcmV0dXJuIGZpbGVTdHJpbmc7XHJcbn07XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGZpbGVQYXRoQXJnXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5leHBvcnQgbGV0IHRvVmlueWxTeW5jID0gZnVuY3Rpb24oZmlsZVBhdGhBcmcsb3B0aW9ucyA9IHt9KSB7XHJcbiAgICByZXR1cm4gcGx1Z2lucy52aW55bEZpbGUucmVhZFN5bmMoZmlsZVBhdGhBcmcsb3B0aW9ucyk7XHJcbn07XHJcblxyXG4vKipcclxuICogbGV0cyB5b3UgcmVsb2FkIGZpbGVzIGhvdC5cclxuICogQHBhcmFtIHBhdGhcclxuICogQHJldHVybnMge2FueX1cclxuICovXHJcbmV4cG9ydCBsZXQgcmVxdWlyZVJlbG9hZCA9IGZ1bmN0aW9uKHBhdGg6c3RyaW5nKXtcclxuICAgIHJldHVybiBwbHVnaW5zLnJlcXVpcmVSZWxvYWQocGF0aCk7XHJcbn07Il19
